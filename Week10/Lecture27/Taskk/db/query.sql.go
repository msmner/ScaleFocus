// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createStory = `-- name: CreateStory :execresult
INSERT INTO stories (story_id, story_title, story_score, created_at) VALUES (?, ?, ?, ?)
`

type CreateStoryParams struct {
	StoryID    int32
	StoryTitle string
	StoryScore int32
	CreatedAt  time.Time
}

func (q *Queries) CreateStory(ctx context.Context, arg CreateStoryParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createStory,
		arg.StoryID,
		arg.StoryTitle,
		arg.StoryScore,
		arg.CreatedAt,
	)
}

const deleteStory = `-- name: DeleteStory :exec
DELETE FROM stories
`

func (q *Queries) DeleteStory(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteStory)
	return err
}

const selectRecords = `-- name: SelectRecords :many
SELECT story_id, story_title, story_score, created_at FROM stories
`

func (q *Queries) SelectRecords(ctx context.Context) ([]Story, error) {
	rows, err := q.db.QueryContext(ctx, selectRecords)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Story
	for rows.Next() {
		var i Story
		if err := rows.Scan(
			&i.StoryID,
			&i.StoryTitle,
			&i.StoryScore,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
